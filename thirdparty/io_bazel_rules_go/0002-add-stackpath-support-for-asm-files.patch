From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "Artem V. Navrotskiy" <bozaro@yandex.ru>
Date: Wed, 28 Sep 2022 11:01:54 +0300
Subject: [PATCH] Add `stackpath` support for asm files

---
 go/tools/builders/asm.go        | 17 ++++++++++-------
 go/tools/builders/compilepkg.go |  4 ++--
 2 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/go/tools/builders/asm.go b/go/tools/builders/asm.go
index 133e950f..aa1ec09b 100644
--- a/go/tools/builders/asm.go
+++ b/go/tools/builders/asm.go
@@ -28,7 +28,7 @@ import (
 // by the compiler. This is only needed in go1.12+ when there is at least one
 // .s file. If the symabis file is not needed, no file will be generated,
 // and "", nil will be returned.
-func buildSymabisFile(goenv *env, sFiles, hFiles []fileInfo, asmhdr string) (string, error) {
+func buildSymabisFile(goenv *env, sFiles, hFiles []fileInfo, asmhdr string, stackPath string) (string, error) {
 	if len(sFiles) == 0 {
 		return "", nil
 	}
@@ -69,13 +69,18 @@ func buildSymabisFile(goenv *env, sFiles, hFiles []fileInfo, asmhdr string) (str
 	symabisName = symabisFile.Name()
 	symabisFile.Close()
 
+	asmFiles := make([]string, 0, len(sFiles))
+	for _, sFile := range sFiles {
+		asmFiles = append(asmFiles, sFile.filename)
+	}
+
 	// Run the assembler.
 	wd, err := os.Getwd()
 	if err != nil {
 		return symabisName, err
 	}
 	asmargs := goenv.goTool("asm")
-	asmargs = append(asmargs, "-trimpath", wd)
+	asmargs = append(asmargs, createTrimPath(nil, wd, stackPath, asmFiles))
 	asmargs = append(asmargs, "-I", wd)
 	asmargs = append(asmargs, "-I", filepath.Join(os.Getenv("GOROOT"), "pkg", "include"))
 	asmargs = append(asmargs, "-I", asmhdrDir)
@@ -90,15 +95,13 @@ func buildSymabisFile(goenv *env, sFiles, hFiles []fileInfo, asmhdr string) (str
 	// TODO(#1894): define GOOS_goos, GOARCH_goarch, both here and in the
 	// GoAsm action.
 	asmargs = append(asmargs, "-gensymabis", "-o", symabisName, "--")
-	for _, sFile := range sFiles {
-		asmargs = append(asmargs, sFile.filename)
-	}
+	asmargs = append(asmargs, asmFiles...)
 
 	err = goenv.runCommand(asmargs)
 	return symabisName, err
 }
 
-func asmFile(goenv *env, srcPath, packagePath string, asmFlags []string, outPath string) error {
+func asmFile(goenv *env, srcPath, packagePath string, asmFlags []string, outPath string, stackPath string) error {
 	args := goenv.goTool("asm")
 	args = append(args, asmFlags...)
 	// The package path has to be specified as of Go 1.19 or the resulting
@@ -107,7 +110,7 @@ func asmFile(goenv *env, srcPath, packagePath string, asmFlags []string, outPath
 	if packagePath != "" && isGo119OrHigher() {
 		args = append(args, "-p", packagePath)
 	}
-	args = append(args, "-trimpath", ".")
+	args = append(args, createTrimPath(nil, ".", stackPath, []string{srcPath}))
 	args = append(args, "-o", outPath)
 	args = append(args, "--", srcPath)
 	absArgs(args, []string{"-I", "-o", "-trimpath"})
diff --git a/go/tools/builders/compilepkg.go b/go/tools/builders/compilepkg.go
index 00a8cc98..409e0cbb 100644
--- a/go/tools/builders/compilepkg.go
+++ b/go/tools/builders/compilepkg.go
@@ -467,7 +467,7 @@ func compileArchive(
 	if len(srcs.sSrcs) > 0 {
 		asmHdrPath = filepath.Join(workDir, "go_asm.h")
 	}
-	symabisPath, err := buildSymabisFile(goenv, srcs.sSrcs, srcs.hSrcs, asmHdrPath)
+	symabisPath, err := buildSymabisFile(goenv, srcs.sSrcs, srcs.hSrcs, asmHdrPath, stackPath)
 	if symabisPath != "" {
 		if !goenv.shouldPreserveWorkDir {
 			defer os.Remove(symabisPath)
@@ -501,7 +501,7 @@ func compileArchive(
 		}
 		for i, sSrc := range srcs.sSrcs {
 			obj := filepath.Join(workDir, fmt.Sprintf("s%d.o", i))
-			if err := asmFile(goenv, sSrc.filename, packagePath, asmFlags, obj); err != nil {
+			if err := asmFile(goenv, sSrc.filename, packagePath, asmFlags, obj, stackPath); err != nil {
 				return err
 			}
 			objFiles = append(objFiles, obj)
